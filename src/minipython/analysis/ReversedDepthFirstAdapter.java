/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPGoal().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getCommands().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommands) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFunctionCommands(AFunctionCommands node)
    {
        defaultIn(node);
    }

    public void outAFunctionCommands(AFunctionCommands node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCommands(AFunctionCommands node)
    {
        inAFunctionCommands(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionCommands(node);
    }

    public void inAStatementCommands(AStatementCommands node)
    {
        defaultIn(node);
    }

    public void outAStatementCommands(AStatementCommands node)
    {
        defaultOut(node);
    }

    public void caseAStatementCommands(AStatementCommands node)
    {
        inAStatementCommands(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementCommands(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunction(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        {
            Object temp[] = node.getNextArg().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNextArg) temp[i]).apply(this);
            }
        }
        if(node.getSetValue() != null)
        {
            node.getSetValue().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArgument(node);
    }

    public void inASetValue(ASetValue node)
    {
        defaultIn(node);
    }

    public void outASetValue(ASetValue node)
    {
        defaultOut(node);
    }

    public void caseASetValue(ASetValue node)
    {
        inASetValue(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outASetValue(node);
    }

    public void inANextArg(ANextArg node)
    {
        defaultIn(node);
    }

    public void outANextArg(ANextArg node)
    {
        defaultOut(node);
    }

    public void caseANextArg(ANextArg node)
    {
        inANextArg(node);
        if(node.getSetValue() != null)
        {
            node.getSetValue().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outANextArg(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSecondId() != null)
        {
            node.getSecondId().apply(this);
        }
        if(node.getFirstId() != null)
        {
            node.getFirstId().apply(this);
        }
        outAForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        {
            Object temp[] = node.getNextExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNextExpression) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPrintStatement(node);
    }

    public void inAEqualStatement(AEqualStatement node)
    {
        defaultIn(node);
    }

    public void outAEqualStatement(AEqualStatement node)
    {
        defaultOut(node);
    }

    public void caseAEqualStatement(AEqualStatement node)
    {
        inAEqualStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAEqualStatement(node);
    }

    public void inAMinEqualStatement(AMinEqualStatement node)
    {
        defaultIn(node);
    }

    public void outAMinEqualStatement(AMinEqualStatement node)
    {
        defaultOut(node);
    }

    public void caseAMinEqualStatement(AMinEqualStatement node)
    {
        inAMinEqualStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMinEqualStatement(node);
    }

    public void inADivEqualStatement(ADivEqualStatement node)
    {
        defaultIn(node);
    }

    public void outADivEqualStatement(ADivEqualStatement node)
    {
        defaultOut(node);
    }

    public void caseADivEqualStatement(ADivEqualStatement node)
    {
        inADivEqualStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADivEqualStatement(node);
    }

    public void inAArrayEqualStatement(AArrayEqualStatement node)
    {
        defaultIn(node);
    }

    public void outAArrayEqualStatement(AArrayEqualStatement node)
    {
        defaultOut(node);
    }

    public void caseAArrayEqualStatement(AArrayEqualStatement node)
    {
        inAArrayEqualStatement(node);
        if(node.getSecondExpression() != null)
        {
            node.getSecondExpression().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArrayEqualStatement(node);
    }

    public void inAAssertStatement(AAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStatement(AAssertStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        inAAssertStatement(node);
        if(node.getNextExpression() != null)
        {
            node.getNextExpression().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssertStatement(node);
    }

    public void inAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallStatement(AFunctionCallStatement node)
    {
        inAFunctionCallStatement(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallStatement(node);
    }

    public void inANotComparison(ANotComparison node)
    {
        defaultIn(node);
    }

    public void outANotComparison(ANotComparison node)
    {
        defaultOut(node);
    }

    public void caseANotComparison(ANotComparison node)
    {
        inANotComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outANotComparison(node);
    }

    public void inAAndComparison(AAndComparison node)
    {
        defaultIn(node);
    }

    public void outAAndComparison(AAndComparison node)
    {
        defaultOut(node);
    }

    public void caseAAndComparison(AAndComparison node)
    {
        inAAndComparison(node);
        if(node.getComp2() != null)
        {
            node.getComp2().apply(this);
        }
        if(node.getComp1() != null)
        {
            node.getComp1().apply(this);
        }
        outAAndComparison(node);
    }

    public void inAOrComparison(AOrComparison node)
    {
        defaultIn(node);
    }

    public void outAOrComparison(AOrComparison node)
    {
        defaultOut(node);
    }

    public void caseAOrComparison(AOrComparison node)
    {
        inAOrComparison(node);
        if(node.getComp2() != null)
        {
            node.getComp2().apply(this);
        }
        if(node.getComp1() != null)
        {
            node.getComp1().apply(this);
        }
        outAOrComparison(node);
    }

    public void inAGreaterComparison(AGreaterComparison node)
    {
        defaultIn(node);
    }

    public void outAGreaterComparison(AGreaterComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreaterComparison(AGreaterComparison node)
    {
        inAGreaterComparison(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAGreaterComparison(node);
    }

    public void inALessComparison(ALessComparison node)
    {
        defaultIn(node);
    }

    public void outALessComparison(ALessComparison node)
    {
        defaultOut(node);
    }

    public void caseALessComparison(ALessComparison node)
    {
        inALessComparison(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outALessComparison(node);
    }

    public void inAEqualsComparison(AEqualsComparison node)
    {
        defaultIn(node);
    }

    public void outAEqualsComparison(AEqualsComparison node)
    {
        defaultOut(node);
    }

    public void caseAEqualsComparison(AEqualsComparison node)
    {
        inAEqualsComparison(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAEqualsComparison(node);
    }

    public void inAGreaterOrEqualComparison(AGreaterOrEqualComparison node)
    {
        defaultIn(node);
    }

    public void outAGreaterOrEqualComparison(AGreaterOrEqualComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreaterOrEqualComparison(AGreaterOrEqualComparison node)
    {
        inAGreaterOrEqualComparison(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAGreaterOrEqualComparison(node);
    }

    public void inALessOrEqualComparison(ALessOrEqualComparison node)
    {
        defaultIn(node);
    }

    public void outALessOrEqualComparison(ALessOrEqualComparison node)
    {
        defaultOut(node);
    }

    public void caseALessOrEqualComparison(ALessOrEqualComparison node)
    {
        inALessOrEqualComparison(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outALessOrEqualComparison(node);
    }

    public void inANotEqualsComparison(ANotEqualsComparison node)
    {
        defaultIn(node);
    }

    public void outANotEqualsComparison(ANotEqualsComparison node)
    {
        defaultOut(node);
    }

    public void caseANotEqualsComparison(ANotEqualsComparison node)
    {
        inANotEqualsComparison(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outANotEqualsComparison(node);
    }

    public void inATrueComparison(ATrueComparison node)
    {
        defaultIn(node);
    }

    public void outATrueComparison(ATrueComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        inATrueComparison(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueComparison(node);
    }

    public void inAFalseComparison(AFalseComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseComparison(AFalseComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        inAFalseComparison(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseComparison(node);
    }

    public void inAPlusExpression(APlusExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusExpression(APlusExpression node)
    {
        defaultOut(node);
    }

    public void caseAPlusExpression(APlusExpression node)
    {
        inAPlusExpression(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAPlusExpression(node);
    }

    public void inAMinusExpression(AMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression(AMinusExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinusExpression(AMinusExpression node)
    {
        inAMinusExpression(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAMinusExpression(node);
    }

    public void inAMultExpression(AMultExpression node)
    {
        defaultIn(node);
    }

    public void outAMultExpression(AMultExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultExpression(AMultExpression node)
    {
        inAMultExpression(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAMultExpression(node);
    }

    public void inADivExpression(ADivExpression node)
    {
        defaultIn(node);
    }

    public void outADivExpression(ADivExpression node)
    {
        defaultOut(node);
    }

    public void caseADivExpression(ADivExpression node)
    {
        inADivExpression(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outADivExpression(node);
    }

    public void inAModExpression(AModExpression node)
    {
        defaultIn(node);
    }

    public void outAModExpression(AModExpression node)
    {
        defaultOut(node);
    }

    public void caseAModExpression(AModExpression node)
    {
        inAModExpression(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAModExpression(node);
    }

    public void inADmultExpression(ADmultExpression node)
    {
        defaultIn(node);
    }

    public void outADmultExpression(ADmultExpression node)
    {
        defaultOut(node);
    }

    public void caseADmultExpression(ADmultExpression node)
    {
        inADmultExpression(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outADmultExpression(node);
    }

    public void inAIdentExpression(AIdentExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentExpression(AIdentExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdentExpression(AIdentExpression node)
    {
        inAIdentExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentExpression(node);
    }

    public void inAArrayIdExpression(AArrayIdExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayIdExpression(AArrayIdExpression node)
    {
        defaultOut(node);
    }

    public void caseAArrayIdExpression(AArrayIdExpression node)
    {
        inAArrayIdExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArrayIdExpression(node);
    }

    public void inAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallExpression(AFunctionCallExpression node)
    {
        inAFunctionCallExpression(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallExpression(node);
    }

    public void inAValueExpression(AValueExpression node)
    {
        defaultIn(node);
    }

    public void outAValueExpression(AValueExpression node)
    {
        defaultOut(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        inAValueExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpression(node);
    }

    public void inAOpenExpression(AOpenExpression node)
    {
        defaultIn(node);
    }

    public void outAOpenExpression(AOpenExpression node)
    {
        defaultOut(node);
    }

    public void caseAOpenExpression(AOpenExpression node)
    {
        inAOpenExpression(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAOpenExpression(node);
    }

    public void inATypeExpression(ATypeExpression node)
    {
        defaultIn(node);
    }

    public void outATypeExpression(ATypeExpression node)
    {
        defaultOut(node);
    }

    public void caseATypeExpression(ATypeExpression node)
    {
        inATypeExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outATypeExpression(node);
    }

    public void inAMaxExpression(AMaxExpression node)
    {
        defaultIn(node);
    }

    public void outAMaxExpression(AMaxExpression node)
    {
        defaultOut(node);
    }

    public void caseAMaxExpression(AMaxExpression node)
    {
        inAMaxExpression(node);
        {
            Object temp[] = node.getMoreValues().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMoreValues) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAMaxExpression(node);
    }

    public void inAMinExpression(AMinExpression node)
    {
        defaultIn(node);
    }

    public void outAMinExpression(AMinExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinExpression(AMinExpression node)
    {
        inAMinExpression(node);
        {
            Object temp[] = node.getMoreValues().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMoreValues) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAMinExpression(node);
    }

    public void inAArrayExpExpression(AArrayExpExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayExpExpression(AArrayExpExpression node)
    {
        defaultOut(node);
    }

    public void caseAArrayExpExpression(AArrayExpExpression node)
    {
        inAArrayExpExpression(node);
        {
            Object temp[] = node.getNextExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNextExpression) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAArrayExpExpression(node);
    }

    public void inANextNextExpression(ANextNextExpression node)
    {
        defaultIn(node);
    }

    public void outANextNextExpression(ANextNextExpression node)
    {
        defaultOut(node);
    }

    public void caseANextNextExpression(ANextNextExpression node)
    {
        inANextNextExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANextNextExpression(node);
    }

    public void inAArglist(AArglist node)
    {
        defaultIn(node);
    }

    public void outAArglist(AArglist node)
    {
        defaultOut(node);
    }

    public void caseAArglist(AArglist node)
    {
        inAArglist(node);
        {
            Object temp[] = node.getNextExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNextExpression) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAArglist(node);
    }

    public void inAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        inAFunctionCallFunctionCall(node);
        if(node.getArglist() != null)
        {
            node.getArglist().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunctionCallFunctionCall(node);
    }

    public void inAMoreMoreValues(AMoreMoreValues node)
    {
        defaultIn(node);
    }

    public void outAMoreMoreValues(AMoreMoreValues node)
    {
        defaultOut(node);
    }

    public void caseAMoreMoreValues(AMoreMoreValues node)
    {
        inAMoreMoreValues(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAMoreMoreValues(node);
    }

    public void inAIdValue(AIdValue node)
    {
        defaultIn(node);
    }

    public void outAIdValue(AIdValue node)
    {
        defaultOut(node);
    }

    public void caseAIdValue(AIdValue node)
    {
        inAIdValue(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        if(node.getFullstop() != null)
        {
            node.getFullstop().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdValue(node);
    }

    public void inANumberValue(ANumberValue node)
    {
        defaultIn(node);
    }

    public void outANumberValue(ANumberValue node)
    {
        defaultOut(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        inANumberValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberValue(node);
    }

    public void inAStringValue(AStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValue(AStringValue node)
    {
        defaultOut(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        inAStringValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValue(node);
    }

    public void inANoneValue(ANoneValue node)
    {
        defaultIn(node);
    }

    public void outANoneValue(ANoneValue node)
    {
        defaultOut(node);
    }

    public void caseANoneValue(ANoneValue node)
    {
        inANoneValue(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANoneValue(node);
    }
}
