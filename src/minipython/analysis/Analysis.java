/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGoal(AGoal node);
    void caseAFunctionCommands(AFunctionCommands node);
    void caseAStatementCommands(AStatementCommands node);
    void caseAFunction(AFunction node);
    void caseAArgument(AArgument node);
    void caseASetValue(ASetValue node);
    void caseANextArg(ANextArg node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAEqualStatement(AEqualStatement node);
    void caseAMinEqualStatement(AMinEqualStatement node);
    void caseADivEqualStatement(ADivEqualStatement node);
    void caseAArrayEqualStatement(AArrayEqualStatement node);
    void caseAAssertStatement(AAssertStatement node);
    void caseAFunctionCallStatement(AFunctionCallStatement node);
    void caseANotComparison(ANotComparison node);
    void caseAAndComparison(AAndComparison node);
    void caseAOrComparison(AOrComparison node);
    void caseAGreaterComparison(AGreaterComparison node);
    void caseALessComparison(ALessComparison node);
    void caseAEqualsComparison(AEqualsComparison node);
    void caseAGreaterOrEqualComparison(AGreaterOrEqualComparison node);
    void caseALessOrEqualComparison(ALessOrEqualComparison node);
    void caseANotEqualsComparison(ANotEqualsComparison node);
    void caseATrueComparison(ATrueComparison node);
    void caseAFalseComparison(AFalseComparison node);
    void caseAPlusExpression(APlusExpression node);
    void caseAMinusExpression(AMinusExpression node);
    void caseAMultExpression(AMultExpression node);
    void caseADivExpression(ADivExpression node);
    void caseAModExpression(AModExpression node);
    void caseADmultExpression(ADmultExpression node);
    void caseAIdentExpression(AIdentExpression node);
    void caseAArrayIdExpression(AArrayIdExpression node);
    void caseAFunctionCallExpression(AFunctionCallExpression node);
    void caseAValueExpression(AValueExpression node);
    void caseAOpenExpression(AOpenExpression node);
    void caseATypeExpression(ATypeExpression node);
    void caseAMaxExpression(AMaxExpression node);
    void caseAMinExpression(AMinExpression node);
    void caseAArrayExpExpression(AArrayExpExpression node);
    void caseANextNextExpression(ANextNextExpression node);
    void caseAArglist(AArglist node);
    void caseAFunctionCallFunctionCall(AFunctionCallFunctionCall node);
    void caseAMoreMoreValues(AMoreMoreValues node);
    void caseAIdValue(AIdValue node);
    void caseANumberValue(ANumberValue node);
    void caseAStringValue(AStringValue node);
    void caseANoneValue(ANoneValue node);

    void caseTTab(TTab node);
    void caseTDef(TDef node);
    void caseTLeftPar(TLeftPar node);
    void caseTRightPar(TRightPar node);
    void caseTSemi(TSemi node);
    void caseTComma(TComma node);
    void caseTIf(TIf node);
    void caseTFullstop(TFullstop node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTIn(TIn node);
    void caseTReturn(TReturn node);
    void caseTPrint(TPrint node);
    void caseTSet(TSet node);
    void caseTFastSub(TFastSub node);
    void caseTFastDiv(TFastDiv node);
    void caseTLeftBracket(TLeftBracket node);
    void caseTRightBracket(TRightBracket node);
    void caseTAssert(TAssert node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDmult(TDmult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTMax(TMax node);
    void caseTMin(TMin node);
    void caseTOpen(TOpen node);
    void caseTType(TType node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTLess(TLess node);
    void caseTGreater(TGreater node);
    void caseTNotEqual(TNotEqual node);
    void caseTEqual(TEqual node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTGreaterOrEqual(TGreaterOrEqual node);
    void caseTLessOrEqual(TLessOrEqual node);
    void caseTNull(TNull node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTId(TId node);
    void caseTString(TString node);
    void caseTNumber(TNumber node);
    void caseEOF(EOF node);
}
