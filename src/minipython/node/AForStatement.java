/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AForStatement extends PStatement
{
    private TId _firstId_;
    private TId _secondId_;
    private PStatement _statement_;

    public AForStatement()
    {
    }

    public AForStatement(
        TId _firstId_,
        TId _secondId_,
        PStatement _statement_)
    {
        setFirstId(_firstId_);

        setSecondId(_secondId_);

        setStatement(_statement_);

    }
    public Object clone()
    {
        return new AForStatement(
            (TId) cloneNode(_firstId_),
            (TId) cloneNode(_secondId_),
            (PStatement) cloneNode(_statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStatement(this);
    }

    public TId getFirstId()
    {
        return _firstId_;
    }

    public void setFirstId(TId node)
    {
        if(_firstId_ != null)
        {
            _firstId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _firstId_ = node;
    }

    public TId getSecondId()
    {
        return _secondId_;
    }

    public void setSecondId(TId node)
    {
        if(_secondId_ != null)
        {
            _secondId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _secondId_ = node;
    }

    public PStatement getStatement()
    {
        return _statement_;
    }

    public void setStatement(PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _statement_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_firstId_)
            + toString(_secondId_)
            + toString(_statement_);
    }

    void removeChild(Node child)
    {
        if(_firstId_ == child)
        {
            _firstId_ = null;
            return;
        }

        if(_secondId_ == child)
        {
            _secondId_ = null;
            return;
        }

        if(_statement_ == child)
        {
            _statement_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_firstId_ == oldChild)
        {
            setFirstId((TId) newChild);
            return;
        }

        if(_secondId_ == oldChild)
        {
            setSecondId((TId) newChild);
            return;
        }

        if(_statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

    }
}
